
 type actor {
    name: string
    director.film: [film]
    actor.film: [performance]
    editor.film: [film]
    producer.films_executive_produced: [film]
    writer.film: [film]
    crewmember.films_crewed: [film]
    cinematographer.film: [film]
    costumer_designer.costume_design_for_film: [film]
    production_designer.films_production_designed: [film]
    art_director.films_art_directed: [film]
    producer.film: [film]
    person_or_entity_appearing_in_films: [film]
    actor.dubbing_performances: [actor]
    casting_director.films_casting_directed: [film]
    music_contributor.film: [film]
    set_designer.sets_designed: [film]
    type: [Generic]
    story_contributor.story_credits: [film]
}
 type character {
    name: string
    character.portrayed_in_films: [film] #TODO: Need to check
    type: [Generic]
    subject.films: [film]
    character.portrayed_in_films_dubbed: [Generic] #TODO: Need to check
}

 type film {
    name: string
    initial_release_date: string
    genre: [Genre]
    initial_release_date: string
    loc: string
    starring: [performance]
    netflix_id: string
    traileraddict_id: string
    rottentomatoes_id: string
    tagline: string
    metacritic_id: string
    gross_revenue: string #TODO: Need to check
    edited_by: [actor]
    country: [Country]
    executive_produced_by: [actor]
    runtime: string #TODO: Need to check
    story_by: [actor]
    costume_design_by: [actor]
    production_companies: [Company]
    language: string #TODO: Need to check
    art_direction_by: [actor]
    produced_by: [actor]
    music: [actor]
    dubbing_performances: string #TODO: Need to check
    sequel: [film]
    production_design_by: [actor]
    rating: [Rating]
    featured_song: [Song]
    collections: [collection]
    cinematography: [actor]
    series: [series]
    festivals: [Festival]
    other_crew: [Generic]
    distributors: [Generic]
    format: [Format]
    written_by: [actor]
    soundtrack: [Generic]
    other_companies: [Generic]
    release_date_s: [Generic]
    set_decoration_by: [actor]
    type: [Generic]
    estimated_budget: [Generic]
 }

  type content_rating {
    name: string
    type: [Generic]
    content_rating.minimum_unaccompanied_age: int
    content_rating.country: string #TODO: Need to check
    content_rating.rating_system: string #TODO: Need to check
    rating: [film]
}

 type distributor {
    name: string
    production_company.films: [film]
    topic_server.webref_cluster_members_type: string #TODO: Need to check
    distributor.films_distributed: string #TODO: Need to check
    type: [Generic]
}

 type featured_song {
    name: string
    featured_song.featured_in_film: [film]
    featured_song.performed_by: string #TODO: Need to check
    type: [Generic]
}

 type collection {
    name: string
    collection.films_in_collection: [film]
}

 type series {
    name: string
    series.films_in_series: [film]
    type: [Generic]
}

 type festival_event {
    name: string
    festival_event.films: string #TODO: Need to check
    festival_event.festival: string #TODO: Need to check
    type: [Generic]
}

 type location {
    name: string
    type: [Generic]
    location.featured_in_films: string #TODO: Need to check
    subject.films: string #TODO: Need to check
}

 type genre {
    name: string
}

 type format {
    name: string
    type: [Generic]
    format.format: [film]
}

 type performance {
    performance.film: [film]
    performance.character_note: string
    performance.character: [Character]
    performance.actor: [actor]
    performance.special_performance_type: [Special_performance_type]
    type: [Generic]
}

 type Generic {
    name: string
}

 type special_performance_type {
    name: string
    special_performance_type.performance_type: [performance]
    personal_appearance_type.appearances: [Generic]
    type: [Generic]
    company_role_or_service.companies_performing_this_role_or_service: [Generic]
}
